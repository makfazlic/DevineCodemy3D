image: gradle:jdk11

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SONARQUBE_PROJECT_KEY: ${CI_PROJECT_ID}:${CI_COMMIT_REF_SLUG}
  SONARQUBE_PROJECT_NAME: sa4/2022/2-pipelinepredators/backend:${CI_COMMIT_REF_SLUG}
  SONARQUBE_GROUP_ID: AYAETsxiKvyE7mJiVutx
  SSH_HOST: "gitlab-cd@thepipelinepredators.sa4.si.usi.ch"
  DOCKER_STAGING_HOST: "thepipelinepredators.sa4.si.usi.ch"
  CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX_SLASH: ${FROM ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/
  CODELAND_BACKEND_BASE_URL: "https://thepipelinepredators.sa4.si.usi.ch:8080"
  CODELAND_FRONTEND_BASE_URL: "https://thepipelinepredators.sa4.si.usi.ch"

stages:
  - compile
  - test
  - sonarqube
  - checkstyle
  - build
  - release
  - deploy

compile:
  stage: compile
  script: gradle compileJava
  artifacts:
    when: always
    paths:
      - build/classes
    expire_in: 1 hour

build_jar:
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "main")
  stage: build
  script: gradle build
  artifacts:
    when: always
    paths:
      - build/libs/*
    expire_in: 1 hour

test:
  stage: test
  script: gradle test
  artifacts:
    when: always
    paths:
      - build/reports/jacoco/test/*
      - build/reports/tests/*
      - build/test-results/test/TEST-*
      - build/classes
    expire_in: 1 hour
    reports:
      junit: [build/reports/jacoco/test/jacocoTestReport.xml, build/test-results/test/TEST-*]

checkstyle:
  stage: checkstyle
  script: gradle checkstyleMain
  artifacts:
    when: always
    paths:
      - build/reports/checkstyle/*


.sonarqube-check:
  stage: sonarqube
  image:
    name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache

# This sonarqube job can be manually run on feature branches.
# It is allowed to fail.
sonarqube-check-branch:
  extends: .sonarqube-check
  rules:
      - if: ($CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH != "main")
  when: manual
  allow_failure: true
  script:
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/projects/create?name=${SONARQUBE_PROJECT_NAME}&project=${SONARQUBE_PROJECT_KEY}\" || echo Project already exists"    
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=user\" || echo Project permission already set or has error"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=codeviewer\" || echo Project permission already set or has error"
    - sonar-scanner


# This sonarqube job is run on main and dev, and it's automatic.
# Moreover, it is *not* allowed to fail - if the Quality Gate fails,
# the pipeline fails.
sonarqube-check:
  extends: .sonarqube-check
  rules:
      - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "main")
  allow_failure: false
  script:
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/projects/create?name=${SONARQUBE_PROJECT_NAME}&project=${SONARQUBE_PROJECT_KEY}\" || echo Project already exists"    
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=user\" || echo Project permission already set or has error"
    - "curl -u ${SONAR_TOKEN}: -X POST \"https://lab.si.usi.ch/sonarqube/api/permissions/add_group?projectKey=${SONARQUBE_PROJECT_KEY}&groupId=${SONARQUBE_GROUP_ID}&permission=codeviewer\" || echo Project permission already set or has error"  
    - sonar-scanner  

release_backend:
  stage: release
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:stable-git
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  services:
    - name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:stable-dind
      alias: docker
  script:
    - echo "Logging to GitLab Container Registry with CI credentials..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - echo ""
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

deploy_backend:
  rules:
      - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
  stage: deploy
  services:
    - name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:stable-dind
      alias: docker
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker/compose:latest
  script:
    - setup_ssh_docker_host
    - echo "Logging to GitLab Container Registry with CI credentials..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - echo ""
    - cd deployment
    - docker-compose -f docker-compose-backend.yml down
    - docker-compose -f docker-compose-backend.yml pull
    - docker-compose -f docker-compose-backend.yml up -d

.devops: &devops |
  function setup_ssh_docker_host() {
    echo "Setting up ssh agent proxy..."
    apk add openssh-client

    # Run ssh-agent (inside the build environment)
    eval $(ssh-agent -s)

    mkdir -p ~/.ssh

    echo "$DOCKER_CD_KEY_PP" >~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa

    ssh-keyscan -H "$DOCKER_STAGING_HOST" >>~/.ssh/known_hosts
    ssh-add ~/.ssh/id_rsa

    export DOCKER_HOST="ssh://$SSH_HOST"
  }

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - *devops    